# Gotcha Guardian Payment Server - Docker Compose Configuration
# This file provides different deployment scenarios for the payment server

version: '3.8'

# =============================================================================
# SERVICES
# =============================================================================

services:
  # Main payment server application
  payment-server:
    build:
      context: .
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-}
    image: gotcha-guardian-payment-server:${VERSION:-latest}
    container_name: gotcha-guardian-payment
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - DATABASE_PATH=/app/data/payment_server.db
      - LOG_DIR=/app/logs
      - PRODUCT_FILES_DIR=/app/products
      - BACKUP_DIR=/app/backups
      - RATE_LIMIT_STORAGE_URI=redis://redis:6379/0  # Use Redis for rate limiting
    env_file:
      - .env
    volumes:
      # Persistent data storage
      - payment_data:/app/data
      - payment_logs:/app/logs
      - payment_backups:/app/backups
      - ./products:/app/products:ro  # Read-only product files
      - ./config:/app/config:ro      # Read-only configuration
    networks:
      - payment_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Redis for caching and rate limiting (optional)
  redis:
    image: redis:7-alpine
    container_name: gotcha-guardian-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - payment_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: gotcha-guardian-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - payment_network
    depends_on:
      - payment-server
    profiles:
      - production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M

  # Database backup service (optional)
  backup:
    build:
      context: .
      target: production
    image: gotcha-guardian-payment-server:${VERSION:-latest}
    container_name: gotcha-guardian-backup
    restart: "no"
    environment:
      - BACKUP_ONLY=true
    env_file:
      - .env
    volumes:
      - payment_data:/app/data:ro
      - payment_backups:/app/backups
    networks:
      - payment_network
    command: python -c "from src.models.database import DatabaseManager; DatabaseManager().create_backup()"
    profiles:
      - backup
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  payment_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  payment_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  
  payment_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
  
  payment_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/backups
  
  redis_data:
    driver: local
  
  nginx_logs:
    driver: local

# =============================================================================
# DEVELOPMENT OVERRIDE
# =============================================================================

# For development, create docker-compose.override.yml:
# version: '3.8'
# services:
#   payment-server:
#     build:
#       target: development
#     environment:
#       - FLASK_ENV=development
#       - FLASK_DEBUG=True
#     volumes:
#       - .:/app
#     command: python payment_server.py
#     ports:
#       - "5000:5000"

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic development setup:
# docker-compose up payment-server redis

# Production setup with nginx:
# docker-compose --profile production up -d

# Run backup:
# docker-compose --profile backup run --rm backup

# View logs:
# docker-compose logs -f payment-server

# Scale the application:
# docker-compose up --scale payment-server=3

# Stop all services:
# docker-compose down

# Stop and remove volumes (WARNING: This will delete data):
# docker-compose down -v

# Build and start:
# docker-compose up --build

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Create a .env file with the following variables:
# PORT=5000
# FLASK_ENV=production
# FLASK_DEBUG=False
# VERSION=1.0.0
# BUILD_DATE=2024-01-15T10:00:00Z
# VCS_REF=abc1234

# Plus all the application-specific variables from .env.example

# =============================================================================
# MONITORING SETUP
# =============================================================================

# To add monitoring, you can extend this with:
# 
# prometheus:
#   image: prom/prometheus
#   ports:
#     - "9090:9090"
#   volumes:
#     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#   networks:
#     - payment_network
# 
# grafana:
#   image: grafana/grafana
#   ports:
#     - "3000:3000"
#   environment:
#     - GF_SECURITY_ADMIN_PASSWORD=admin
#   volumes:
#     - grafana_data:/var/lib/grafana
#   networks:
#     - payment_network

# =============================================================================
# SECURITY CONSIDERATIONS
# =============================================================================

# 1. Use secrets for sensitive data in production
# 2. Limit container resources to prevent DoS
# 3. Use read-only volumes where possible
# 4. Implement proper network segmentation
# 5. Regular security updates for base images
# 6. Monitor container logs for security events
# 7. Use HTTPS in production (nginx configuration)
# 8. Implement proper backup and disaster recovery

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================

# 1. Use specific version tags, not 'latest'
# 2. Set up proper SSL certificates for nginx
# 3. Configure log rotation and monitoring
# 4. Implement health checks and alerting
# 5. Set up automated backups
# 6. Use container orchestration for high availability
# 7. Implement proper secrets management
# 8. Monitor resource usage and scale accordingly
# 9. Set up CI/CD pipeline for automated deployments
# 10. Test disaster recovery procedures regularly
